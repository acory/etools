# Generated by Django 2.2.7 on 2020-09-24 14:53
import itertools
import random

from django.conf import settings
from django.core.exceptions import FieldDoesNotExist
from django.db import migrations, models
import django.db.models.deletion
from string import ascii_lowercase

def get_random_sequence(length=5):
    return ''.join([random.choice(ascii_lowercase) for _i in range(length)])


def migrate_staff_members_to_fk(apps, schema_editor):
    User = apps.get_model(settings.AUTH_USER_MODEL)
    UserProfile = apps.get_model('users', 'UserProfile')
    PartnerStaffMember = apps.get_model('partners', 'PartnerStaffMember')

    try:
        UserProfile._meta.get_field('_partner_staff_member')
    except FieldDoesNotExist:
        # this field was already removed; nothing to do here
        return

    used_emails = set()

    # iterate over active users at first
    for staff_member in itertools.chain(
        PartnerStaffMember.objects.filter(active=True),
        PartnerStaffMember.objects.filter(active=False)
    ):
        if staff_member.email.lower() in used_emails:
            # only one staff member allowed to be assigned for the user per tenant
            new_email = 'dupe__' + get_random_sequence() + '__' + staff_member.email
            print("duplicated staff member email {}. changed to {}".format(staff_member.email, new_email))
            staff_member.email = new_email
            staff_member.save()
            continue

        user = User.objects.filter(email__iexact=staff_member.email).first()

        if not user:
            user = User.objects.create(
                first_name=staff_member.first_name,
                last_name=staff_member.last_name,
                email=staff_member.email,
                username=staff_member.email,
                is_active=True,
                is_staff=False,
            )
            UserProfile.objects.create(
                user=user,
                job_title=staff_member.title,
                phone_number=staff_member.phone,
            )

        staff_member.user = user
        staff_member.save()
        used_emails.add(staff_member.email.lower())


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('users', '0015_auto_20200924_1453'),
        ('partners', '0045_partnerstaffmember_user'),
    ]

    operations = [
        migrations.RunPython(migrate_staff_members_to_fk, migrations.RunPython.noop),
    ]
