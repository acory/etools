# -*- coding: utf-8 -*-
# Generated by Django 1.10.8 on 2018-11-22 15:22
from __future__ import unicode_literals

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_extensions.db.fields
import model_utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('locations', '0004_pcode_remap_related'),
        ('partners', '0028_auto_20181108_1503'),
        ('reports', '0013_auto_20180709_1348'),
    ]

    operations = [
        migrations.CreateModel(
            name='CPOutputConfig',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('is_monitored', models.BooleanField(default=True, verbose_name='Monitored At Community Level?')),
                ('is_priority', models.BooleanField(default=False, verbose_name='Priority?')),
                ('cp_output', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='fm_config',
                                                   to='reports.Result', verbose_name='CP Output To Be Monitored')),
                ('government_partners', models.ManyToManyField(blank=True, to='partners.PartnerOrganization',
                                                               verbose_name='Contributing Government Partners')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FMMethodType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300, verbose_name='Name')),
                ('slug', django_extensions.db.fields.AutoSlugField(blank=True, editable=False, populate_from='name', verbose_name='Slug')),
            ],
        ),
        migrations.CreateModel(
            name='LocationSite',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('name', models.CharField(max_length=254, verbose_name='Name')),
                ('p_code', models.CharField(blank=True, default='', max_length=32, verbose_name='P Code')),
                ('point', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326, verbose_name='Point')),
                ('is_active', models.BooleanField(blank=True, default=True, verbose_name='Active')),
                ('security_detail', models.TextField(blank=True, verbose_name='Detail on Security')),
                ('parent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sites',
                                             to='locations.Location', verbose_name='Parent Location')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AlterModelOptions(
            name='cpoutputconfig',
            options={'ordering': ('id',), 'verbose_name': 'CP Output Config', 'verbose_name_plural': 'CP Output Configs'},
        ),
        migrations.AlterModelOptions(
            name='fmmethodtype',
            options={'ordering': ('id',), 'verbose_name': 'FM Method Type', 'verbose_name_plural': 'FM Method Types'},
        ),
        migrations.AlterModelOptions(
            name='locationsite',
            options={'ordering': ('parent', 'id'), 'verbose_name': 'Location Site', 'verbose_name_plural': 'Location Sites'},
        ),
    ]
