# -*- coding: utf-8 -*-
# Generated by Django 1.10.8 on 2018-11-28 11:35
from __future__ import unicode_literals

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
from django.utils.timezone import utc
import django.utils.timezone
import django_fsm
import etools.applications.field_monitoring.visits.models
import etools.applications.utils.common.models.mixins
import model_utils.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('field_monitoring_shared', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('reports', '0013_auto_20180709_1348'),
        ('field_monitoring_planning', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='TaskCheckListItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.PositiveIntegerField(db_index=True, editable=False)),
                ('parent_slug', models.CharField(max_length=50, verbose_name='Parent Slug')),
                ('question_number', models.CharField(max_length=10, verbose_name='Question Number')),
                ('question_text', models.CharField(max_length=255, verbose_name='Question Text')),
                ('specific_details', models.TextField(blank=True, verbose_name='Specific Details To Probe')),
                ('methods', models.ManyToManyField(to='field_monitoring_shared.FMMethod', verbose_name='Recommended Methods')),
            ],
            options={
                'ordering': ('visit_task', 'order'),
            },
            bases=(etools.applications.field_monitoring.visits.models.FindingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Visit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('deleted_at', models.DateTimeField(default=datetime.datetime(1970, 1, 1, 0, 0, tzinfo=utc), verbose_name='Deleted At')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(verbose_name='End Date')),
                ('status', django_fsm.FSMField(choices=[('draft', 'Draft'), ('assigned', 'Assigned'), ('finalized', 'Finalized'), ('cancelled', 'Cancelled')], default='draft', max_length=50, verbose_name='Status')),
                ('date_assigned', model_utils.fields.MonitorField(blank=True, default=None, monitor='status', null=True, verbose_name='Date Visit Assigned', when=set(['assigned']))),
                ('date_finalized', model_utils.fields.MonitorField(blank=True, default=None, monitor='status', null=True, verbose_name='Date Visit Finalized', when=set(['finalized']))),
                ('date_cancelled', model_utils.fields.MonitorField(blank=True, default=None, monitor='status', null=True, verbose_name='Date Visit Cancelled', when=set(['cancelled']))),
            ],
            options={
                'abstract': False,
            },
            bases=(etools.applications.utils.common.models.mixins.InheritedModelMixin, models.Model),
        ),
        migrations.CreateModel(
            name='VisitMethodType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parent_slug', models.CharField(max_length=50, verbose_name='Parent Slug')),
                ('name', models.CharField(max_length=300, verbose_name='Name')),
                ('is_recommended', models.BooleanField(default=False, verbose_name='Recommended')),
                ('cp_output', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='visit_method_types', to='reports.Result', verbose_name='CP Output')),
            ],
        ),
        migrations.CreateModel(
            name='VisitTaskLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='visit_task_links', to='field_monitoring_planning.Task')),
            ],
            bases=(etools.applications.field_monitoring.visits.models.FindingMixin, models.Model),
        ),
        migrations.CreateModel(
            name='UNICEFVisit',
            fields=[
                ('visit_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='field_monitoring_visits.Visit')),
            ],
            options={
                'abstract': False,
            },
            bases=('field_monitoring_visits.visit',),
            managers=[
                ('objects', django.db.models.manager.Manager()),
                ('admin_objects', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='visittasklink',
            name='visit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='visit_task_links', to='field_monitoring_visits.Visit'),
        ),
        migrations.AddField(
            model_name='visitmethodtype',
            name='visit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='method_types', to='field_monitoring_visits.Visit', verbose_name='Visit'),
        ),
        migrations.AddField(
            model_name='visit',
            name='author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='visit',
            name='primary_field_monitor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='fm_primary_visits', to=settings.AUTH_USER_MODEL, verbose_name='Primary Field Monitor'),
        ),
        migrations.AddField(
            model_name='visit',
            name='tasks',
            field=models.ManyToManyField(related_name='visits', through='field_monitoring_visits.VisitTaskLink', to='field_monitoring_planning.Task'),
        ),
        migrations.AddField(
            model_name='visit',
            name='team_members',
            field=models.ManyToManyField(blank=True, related_name='fm_visits', to=settings.AUTH_USER_MODEL, verbose_name='Team Members'),
        ),
        migrations.AddField(
            model_name='taskchecklistitem',
            name='visit_task',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='field_monitoring_visits.VisitTaskLink', verbose_name='Task Link'),
        ),
    ]
